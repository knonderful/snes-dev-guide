= SNES graphics

== Sprites and backgrounds

The SNES graphics can be separated into two categories.

The first category is _sprites_.
A sprite is a graphical element that has its own independent position on the screen.
Sprites are normally used for things that the player can interact with, like the hero character, enemies, projectiles etc.

The second category is _background layers_.
A background layer consists of a number of _tiles_ that are organized in a pre-defined raster.
The individual tiles inside the background layer can not be moved.
The only way to change the position of tiles is to move then entire background layer.
Background layers are normally used for things with which the player can not interact.
Examples are the floor, ceiling and walls for a platforming game and artifacts in the distance like clouds and trees.
The SNES supports different graphics modes, each supporting its own set of background layers.
Background layers can appear behind and in front of other layers and sprites.

== Graphics format

The SNES uses color _palettes_ for most of its graphics.
A palette defines which color is used for the corresponding value of a pixel.

For instance, consider the following palette:

.A palette with 4 colors
image::images/palette_2bpp.svg[]

Using this palette, if a pixel is found with value 0, the pixel will be colored white.
A pixel with value 1 will be orange, a pixel with value 2 will be red and a pixel with value 3 will be black.

Most graphics on the SNES assume the first value in the palette to be transparent, meaning that pixels with value zero will not be drawn to the screen.

Each color in the SNES is represented by 15 bits: 5 bits for red, 5 bits for green and 5 bits for blue.
This allows for a total of 32,768 colors.

Using palettes instead of color values in the graphics data has two main advantages.
Firstly, much less memory is needed to store graphics data.
Secondly, it allows for easy animation and re-use of graphics.
For instance, a waterfall effect can be simulated by cleverly cycling the palette colors.
And the swapping of costumes in the classic Megaman series is done by simply updating the palette for the Megaman sprite.

Graphics on the SNES are bitmap-based.
This means that every pixel in an image is defined by a number of bits.
Furthermore, graphics on the SNES are grouped together in sections of 8-by-8 pixels.
Such a section is called a _character_.

The simplest form of a character is when each bit of data represents one pixel of the graphic.
The following is an example of a character which is encoded with one bit per pixel.

.A character with one bit per pixel
image::images/char_1bpp.svg[]

The left image represents the data in memory of the character, while the right image is its representation on screen.
This example uses the palette that we defined earlier.

Using only one bit per pixel only allows for two colors to be used for the character.
To allow for more colors the SNES supports different pixel formats:

* 2 bits per pixel (2 bpp)
* 4 bits per pixel (4 bpp)
* 8 bits per pixel (8 bpp)

Sprites always use the 4 bpp format.
This implicates that a sprite can use up to 16 colors.

The number of bits per pixel used for background tiles depends on the graphics mode that has been selected by the program; it can be either 2, 4 or 8 bits per pixel.

The SNES graphics are stored in a planar structure.
This means that rather than storing all the data for a single pixel together (which is a common approach for image formats like BMP), the graphics are separated by _plane_.
Each plane contains one bit for each pixel of the graphic.
The following example illustrates this, using the same palette as before.

.A character with one bit per pixel
image::images/char_2bpp.svg[]

The first plane contains the least-significant bit for each pixel and the second plane contains the most-significant bit.
The effective pixel value is then applied to the palette, which results in a color for each pixel.

